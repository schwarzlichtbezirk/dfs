syntax = "proto3";
option go_package = "github.com/schwarzlichtbezirk/dfs/pb";

package dfs;

// DataGuide is the service for working with file chunks.
service DataGuide {
	// Read creates reading streaming by dividing big chunk to serie of small chunks.
	rpc Read (Range) returns (Chunk) {}
	// Write receives serie of small chunks and glue them into big one.
	rpc Write (stream Chunk) returns (Summary) {}
	// GetRange returns bounds of stored file chunk.
	// Returns empty struct if no such chunk is present.
	rpc GetRange(FileID) returns (Range) {}
	// Remove deletes file chunks.
	rpc Remove(FileID) returns (Range) {}
}

// FileID is ID of file.
message FileID {
	int64 id = 1;
}

// Range contains information about chunk bounds of file with given ID.
message Range {
	int64 node_id = 1;
	int64 file_id = 2;
	int64 from = 3; // chunk start in file
	int64 to = 4; // chunk end in file
}

// Chunk body.
message Chunk {
	Range range = 1;
	bytes value = 2;
}

// Summary result of chunks write streaming.
message Summary {
	// The duration of the traversal in nanoseconds.
	int64 elapsed_time = 1;
	// The number of chunks received.
	int32 chunk_count = 2;
}

// The end.
