// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.14.0
// source: dfs.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataGuideClient is the client API for DataGuide service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataGuideClient interface {
	// GetProp returns properties of stored file chunk.
	// Returns empty struct if no such chunk is present.
	GetProp(ctx context.Context, in *FileID, opts ...grpc.CallOption) (*Prop, error)
	// Read creates reading streaming by dividing big chunk to serie of small chunks.
	Read(ctx context.Context, in *Param, opts ...grpc.CallOption) (DataGuide_ReadClient, error)
	// Write receives serie of small chunks and glue them into big one.
	Write(ctx context.Context, opts ...grpc.CallOption) (DataGuide_WriteClient, error)
}

type dataGuideClient struct {
	cc grpc.ClientConnInterface
}

func NewDataGuideClient(cc grpc.ClientConnInterface) DataGuideClient {
	return &dataGuideClient{cc}
}

func (c *dataGuideClient) GetProp(ctx context.Context, in *FileID, opts ...grpc.CallOption) (*Prop, error) {
	out := new(Prop)
	err := c.cc.Invoke(ctx, "/dfs.DataGuide/GetProp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataGuideClient) Read(ctx context.Context, in *Param, opts ...grpc.CallOption) (DataGuide_ReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataGuide_ServiceDesc.Streams[0], "/dfs.DataGuide/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataGuideReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataGuide_ReadClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type dataGuideReadClient struct {
	grpc.ClientStream
}

func (x *dataGuideReadClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataGuideClient) Write(ctx context.Context, opts ...grpc.CallOption) (DataGuide_WriteClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataGuide_ServiceDesc.Streams[1], "/dfs.DataGuide/Write", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataGuideWriteClient{stream}
	return x, nil
}

type DataGuide_WriteClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*Summary, error)
	grpc.ClientStream
}

type dataGuideWriteClient struct {
	grpc.ClientStream
}

func (x *dataGuideWriteClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataGuideWriteClient) CloseAndRecv() (*Summary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Summary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataGuideServer is the server API for DataGuide service.
// All implementations must embed UnimplementedDataGuideServer
// for forward compatibility
type DataGuideServer interface {
	// GetProp returns properties of stored file chunk.
	// Returns empty struct if no such chunk is present.
	GetProp(context.Context, *FileID) (*Prop, error)
	// Read creates reading streaming by dividing big chunk to serie of small chunks.
	Read(*Param, DataGuide_ReadServer) error
	// Write receives serie of small chunks and glue them into big one.
	Write(DataGuide_WriteServer) error
	mustEmbedUnimplementedDataGuideServer()
}

// UnimplementedDataGuideServer must be embedded to have forward compatible implementations.
type UnimplementedDataGuideServer struct {
}

func (UnimplementedDataGuideServer) GetProp(context.Context, *FileID) (*Prop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProp not implemented")
}
func (UnimplementedDataGuideServer) Read(*Param, DataGuide_ReadServer) error {
	return status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedDataGuideServer) Write(DataGuide_WriteServer) error {
	return status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedDataGuideServer) mustEmbedUnimplementedDataGuideServer() {}

// UnsafeDataGuideServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataGuideServer will
// result in compilation errors.
type UnsafeDataGuideServer interface {
	mustEmbedUnimplementedDataGuideServer()
}

func RegisterDataGuideServer(s grpc.ServiceRegistrar, srv DataGuideServer) {
	s.RegisterService(&DataGuide_ServiceDesc, srv)
}

func _DataGuide_GetProp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataGuideServer).GetProp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfs.DataGuide/GetProp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataGuideServer).GetProp(ctx, req.(*FileID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataGuide_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Param)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataGuideServer).Read(m, &dataGuideReadServer{stream})
}

type DataGuide_ReadServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type dataGuideReadServer struct {
	grpc.ServerStream
}

func (x *dataGuideReadServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _DataGuide_Write_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataGuideServer).Write(&dataGuideWriteServer{stream})
}

type DataGuide_WriteServer interface {
	SendAndClose(*Summary) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type dataGuideWriteServer struct {
	grpc.ServerStream
}

func (x *dataGuideWriteServer) SendAndClose(m *Summary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataGuideWriteServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataGuide_ServiceDesc is the grpc.ServiceDesc for DataGuide service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataGuide_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dfs.DataGuide",
	HandlerType: (*DataGuideServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProp",
			Handler:    _DataGuide_GetProp_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Read",
			Handler:       _DataGuide_Read_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Write",
			Handler:       _DataGuide_Write_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "dfs.proto",
}
